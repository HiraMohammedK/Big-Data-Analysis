# -*- coding: utf-8 -*-
"""Map_reduce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_NFuIkbxvS0XWECphqCd1Y4NQMGx-i6Z
"""

from collections import defaultdict
import re

# Sample input data (you can replace this with your own text data)
text_data = [
    "Deer","Bear","Deer","Car","Car","Bear","Car"
]

# Define the Mapper function
def mapper(text):
    word_count = defaultdict(int)
    words = re.findall(r'\b\w+\b', text.lower())  # Use regex to find words and make them lowercase
    for word in words:
        word_count[word] += 1
    return word_count.items()

# Define the Reducer function
def reducer(word, counts):
    return word, sum(counts)

# Map step
word_counts = defaultdict(list)
for text in text_data:
    for word, count in mapper(text):
        word_counts[word].append(count)

# Reduce step
for word, counts in word_counts.items():
    result = reducer(word, counts)
    print(f"{result[0]}: {result[1]}")